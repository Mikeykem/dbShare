"use strict";var ApplicationConfiguration=function(){var applicationModuleName="cen3031fa14",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","ui.codemirror"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("codeSnippets"),ApplicationConfiguration.registerModule("comments"),ApplicationConfiguration.registerModule("databases"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/users/views/authentication/signin.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("databases").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Databases","databases","dropdown","/databases(/create)?"),Menus.addSubMenuItem("topbar","databases","List Databases","databases"),Menus.addSubMenuItem("topbar","databases","New Database","databases/create")}]),angular.module("databases").config(["$stateProvider",function($stateProvider){$stateProvider.state("listDatabases",{url:"/databases",templateUrl:"modules/databases/views/list-databases.client.view.html"}).state("createDatabase",{url:"/databases/create",templateUrl:"modules/databases/views/create-database.client.view.html"}).state("viewDatabase",{url:"/databases/:databaseId",templateUrl:"modules/databases/views/view-database.client.view.html"}).state("editDatabase",{url:"/databases/:databaseId/edit",templateUrl:"modules/databases/views/edit-database.client.view.html"})}]),angular.module("codeSnippets").controller("CodeSnippetsController",["$scope","$stateParams","$location","Authentication","CodeSnippets",function($scope,$stateParams,$location,Authentication,CodeSnippets){$scope.authentication=Authentication,$scope.modes=["R"],$scope.mode=$scope.modes[0],$scope.cmOption1={placeholder:"Your code goes here",viewportMargin:1/0,lineNumbers:!0,lineWrapping:!0,autoCloseBrackets:!0,enableSearchTools:!0,showSearchButton:!0,highlightMatches:!0,smartIndent:!0,theme:"monokai",extraKeys:{"Ctrl-Space":"autocomplete"},foldGutter:{rangeFinder:new CodeMirror.fold.combine(CodeMirror.fold.brace,CodeMirror.fold.comment)},gutters:["CodeMirror-linenumbers","CodeMirror-foldgutter"],onLoad:function(_cm){$scope.modeChanged=function(){_cm.setOption("mode",$scope.mode.toLowerCase())}}},$scope.cmOption2={lineNumbers:!0,lineWrapping:!0,autoCloseBrackets:!0,enableSearchTools:!0,showSearchButton:!0,highlightMatches:!0,readOnly:"nocursor",smartIndent:!0,theme:"monokai",extraKeys:{"Ctrl-Space":"autocomplete"},foldGutter:{rangeFinder:new CodeMirror.fold.combine(CodeMirror.fold.brace,CodeMirror.fold.comment)},gutters:["CodeMirror-linenumbers","CodeMirror-foldgutter"]},$scope.cmModel="",$scope.create=function(databaseId){var codeSnippet=new CodeSnippets({code:$scope.cmModel,mode:$scope.mode,databaseId:databaseId});codeSnippet.$save(function(){$scope.cmModel="<!-- XML code in here. -->\n",$scope.mode=$scope.modes[0]},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(codeSnippet){if(codeSnippet){codeSnippet.$remove();for(var i in $scope.codeSnippets)$scope.codeSnippets[i]===codeSnippet&&$scope.codeSnippets.splice(i,1)}else $scope.codeSnippet.$remove(function(){$location.path("codeSnippets")})},$scope.find=function(){$scope.codeSnippets=CodeSnippets.query()},$scope.findOne=function(){$scope.codeSnippet=CodeSnippets.get({codeSnippetId:$stateParams.codeSnippetId})},$scope.resetCodeSnippetField=function(){$scope.cmModel="<!-- XML code in here. -->\n"},$scope.isAdmin=function(){return-1!==Authentication.user.roles.indexOf("admin")}}]),angular.module("comments").controller("CommentsController",["$scope","$stateParams","$location","Authentication","Comments",function($scope,$stateParams,$location,Authentication,Comments){$scope.authentication=Authentication,$scope.create=function(databaseId){var comment=new Comments({reviews:this.reviews,databaseId:databaseId});comment.$save(function(){$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(comment){if(comment){comment.$remove();for(var i in $scope.comments)$scope.comments[i]===comment&&$scope.comments.splice(i,1)}else $scope.comment.$remove(function(){$location.path("comments")})},$scope.update=function(){var comment=$scope.comment;comment.$update(function(){$location.path("comments/"+comment._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.comments=Comments.query()},$scope.findOne=function(){$scope.comment=Comments.get({commentId:$stateParams.commentId})},$scope.resetCommentField=function(){$scope.reviews=null},$scope.isAdmin=function(){return-1!==Authentication.user.roles.indexOf("admin")}}]),angular.module("databases").controller("DatabasesController",["kendo-ui-core.directives","$scope","$stateParams","$location","$window","Users","Authentication","Databases","Comments","CodeSnippets","$modal",function($scope,$stateParams,$location,$window,Users,Authentication,Databases,Comments,CodeSnippets,$modal){$scope.user={},angular.copy(Authentication.user,$scope.user),$scope.authentication=Authentication,$scope.orientation="horizontal",$scope.hello="Hello from Controller!",$scope.create=function(){var database=new Databases({name:this.name,descriptionShort:this.descriptionShort,descriptionLong:this.descriptionLong,isFree:this.isFree,url:this.url});database.$save(function(response){$location.path("databases/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.open=function(size,_database){$scope.modalInstance=$modal.open({templateUrl:"addDBModal",controller:"ModalInstanceCtrl",size:size,backdrop:"static",scope:$scope,resolve:{database:function(){return _database}}})},$scope.remove=function(database){if(database){database.$remove();for(var i in $scope.databases)$scope.databases[i]===database&&$scope.databases.splice(i,1)}else $scope.database.$remove(function(){$location.path("databases")})},$scope.update=function(){var database=$scope.database;database.$update(function(){$location.path("databases/"+database._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.databases=Databases.query()},$scope.findOne=function(){var result=Databases.get({databaseId:$stateParams.databaseId},function(){$scope.findDBUsers(result._id),$scope.getComments(result._id),$scope.getCodeSnippets(result._id),$scope.database=result})},$scope.addDatabaseToPortfolio=function(arg_database,proficiency){$scope.success=$scope.error=null;var user=new Users(Authentication.user),database=new Databases($scope.database);arg_database&&(database=arg_database),-1===user.portfolios.indexOf(database._id)&&(user.portfolios.push(database._id),proficiency&&user.proficientpors.push(database._id),user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=response},function(response){$scope.error=response.data.message})),$scope.modalInstance.dismiss("cancel")},$scope.checkForDatabaseInPortfolio=function(arg_database){$scope.success=$scope.error=null;var user=new Users(Authentication.user),database=new Databases($scope.database);return arg_database&&(database=arg_database),-1===user.portfolios.indexOf(database._id)?!0:!1},$scope.removeDatabaseFromPortfolio=function(arg_database){$scope.success=$scope.error=null;var user=new Users(Authentication.user),database=new Databases($scope.database);arg_database&&(database=arg_database),user.portfolios.splice(user.portfolios.indexOf(database._id),1),user.proficientpors.splice(user.portfolios.indexOf(database._id),1),user.$update(function(response){$scope.success=!0,Authentication.user=response,$scope.user=response},function(response){$scope.error=response.data.message})},$scope.findDBUsers=function(database_id){var allUsers=Users.query({},function(){for(var i=0;i<allUsers.length;i++){var currUser=allUsers[i];-1===currUser.portfolios.indexOf(database_id)&&(allUsers.splice(i,1),i--)}$scope.dbUsers=allUsers})},$scope.getComments=function(database_id){console.log("get here");var allComments=Comments.query({},function(){for(var i=0;i<allComments.length;i++){var currentComment=allComments[i];currentComment.databaseId!==database_id&&(allComments.splice(i,1),i--)}$scope.dbComments=allComments})},$scope.getCodeSnippets=function(database_id){console.log("get here");var allCodeSnippets=CodeSnippets.query({},function(){for(var i=0;i<allCodeSnippets.length;i++){var currentCodeSnippet=allCodeSnippets[i];currentCodeSnippet.databaseId!==database_id&&(allCodeSnippets.splice(i,1),i--)}$scope.dbCodeSnippets=allCodeSnippets})},$scope.isProficient=function(proficients,dbID){for(var i=0;i<proficients.length;i++){{proficients[i]}if(proficients[i]===dbID)return!0}return!1},$scope.isAdmin=function(){return-1!==Authentication.user.roles.indexOf("admin")},$scope.sortorder="name",$scope.selectedTab=1}]),angular.module("databases").controller("ModalInstanceCtrl",["$scope","$modalInstance","database","Users","Authentication","Databases",function($scope,$modalInstance,database){$scope.database=database,$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("codeSnippets").factory("CodeSnippets",["$resource",function($resource){return $resource("codeSnippets/:codeSnippetId",{codeSnippetId:"@_id"})}]),angular.module("comments").factory("Comments",["$resource",function($resource){return $resource("comments/:commentId",{commentId:"@_id"},{update:{method:"PUT"}})}]),angular.module("databases").factory("Databases",["$resource",function($resource){return $resource("databases/:databaseId",{databaseId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("edit",{url:"/settings/edit",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/view-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("list",{url:"/settings/list",templateUrl:"modules/users/views/list-users.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("viewUser",{url:"/users/:userId",templateUrl:"modules/users/views/view-user.client.view.html"}).state("verify",{url:"/verify",templateUrl:"modules/users/views/authentication/verify-email.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.registration="open",$scope.authentication.user&&-1===$scope.authentication.user.roles.indexOf("admin")&&$location.path("/databases"),$scope.signup=function(){if($scope.credentials.confirmpassword!==$scope.credentials.password)$scope.error="Passwords do not match";else if($scope.authentication.user&&-1!==$scope.authentication.user.roles.indexOf("admin"))$http.post("/auth/signup",$scope.credentials).success(function(){$location.path("/databases")}).error(function(response){$scope.error=response.message});else{var match=$scope.credentials.username.match(/^.*@ufl\.edu$/);null===match?$scope.error="You must use a valid UFL email address":"closed"===$scope.registration?$scope.error="Registration is currently closed.":$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/databases")}).error(function(response){$scope.error=response.message})}},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/databases")}).error(function(response){$scope.error=response.message})},$scope.verifyEmail=function(){$scope.success=$scope.error=null,$http.post("/auth/verification/"+$stateParams.token).success(function(response){Authentication.user=response,$location.path("/verify")}).error(function(response){$scope.error=response.message})},$scope.toggleRegistration=function(){$scope.registration="open"===$scope.registration?"closed":"open"}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$timeout","$location","Users","Authentication","Databases","$modal",function($scope,$http,$timeout,$location,Users,Authentication,Databases,$modal){$scope.accountResult=!1,$scope.user={},angular.copy(Authentication.user,$scope.user),$scope.originalUser={},angular.copy($scope.user,$scope.originalUser),$scope.user||$location.path("/"),$scope.authentication=Authentication,$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.cancelChanges=function(){Authentication.user=$scope.originalUser},$scope.redirectToViewProfile=function(ms){$timeout(function(){$location.path("/settings/profile")},ms)},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})},$scope.open=function(size){$scope.modalInstance=$modal.open({templateUrl:"deleteAccountModal",controller:"SettingsController",size:size,backdrop:"static",scope:$scope})},$scope.deleteAccount=function(passwordModal){$scope.success=$scope.error=null,$scope.passwordModal=passwordModal,$http.post("/users/verify",$scope.passwordModal).success(function(){$scope.success=!0,$location.path("/auth/signout"),Authentication.user=null,$scope.modalInstance.dismiss("delete")}).error(function(response){$scope.error=response.message})},$scope.findUserPortfolio=function(){for(var initPortCount=Authentication.user.portfolios.length,i=0;initPortCount>i;i++)$scope.removeBadPortfolioEntries(i)},$scope.removeBadPortfolioEntries=function(i){var databaseID=Authentication.user.portfolios[i],result=Databases.get({databaseId:databaseID},function(){var index=$scope.user.portfolios.indexOf(databaseID);$scope.user.portfolios[index]=result,$scope.finishEditPortfolio()},function(){var index=$scope.user.portfolios.indexOf(databaseID);-1!==index&&$scope.removeElementfromPortfolio(index),$scope.finishEditPortfolio()})},$scope.editPortfolioBoolean=!1,$scope.toggleEditPortfolio=function(){$scope.editPortfolioBoolean=$scope.editPortfolioBoolean===!1?!0:!1},$scope.checkEditPortfolio=function(){return $scope.editPortfolioBoolean===!1?!1:$scope.editPortfolioBoolean===!0?!0:void 0},$scope.removeElementfromPortfolio=function(portfolio_arg){$scope.user.portfolios.splice(portfolio_arg,1),Authentication.user.portfolios.splice(portfolio_arg,1)},$scope.finishEditPortfolio=function(){var user=new Users(Authentication.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("UsersController",["$scope","$stateParams","$location","Users","Databases","Authentication",function($scope,$stateParams,$location,Users,Databases,Authentication){$scope.authentication=Authentication,$scope.user={},$scope.users={},$scope.inactive="",$scope.findAllUsers=function(){$scope.users=Users.query()},$scope.findOneUser=function(){var allUsers=Users.query({},function(){for(var i=0;i<allUsers.length;i++){var currUser=allUsers[i];currUser._id===$stateParams.userId&&($scope.user=currUser,$scope.inactive=-1!==$scope.user.roles.indexOf("inactive"))}$scope.findUserPortfolio()})},$scope.findUserPortfolio=function(){for(var initPortCount=$scope.user.portfolios.length,i=0;initPortCount>i;i++)$scope.removeBadPortfolioEntries(i)},$scope.removeBadPortfolioEntries=function(i){var databaseID=$scope.user.portfolios[i],result=Databases.get({databaseId:databaseID},function(){var index=$scope.user.portfolios.indexOf(databaseID);$scope.user.portfolios[index]=result},function(){var index=$scope.user.portfolios.indexOf(databaseID);-1!==index&&$scope.user.portfolios.splice(index,1)})},$scope.sortorder="displayname",$scope.isAdmin=function(){return-1!==Authentication.user.roles.indexOf("admin")},$scope.userInactive=function(){return $scope.inactive},$scope.deactivateUser=function(){$scope.user.roles.push("inactive"),$scope.inactive=!0;var currUser=$scope.user;Users.save(currUser)},$scope.reactivateUser=function(){$scope.user.roles.splice($scope.user.roles.indexOf("inactive"),1),$scope.inactive=!1;var currUser=$scope.user;Users.save(currUser)}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);